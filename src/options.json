{
  "title": "Lezer Loader options",
  "type": "object",
  "properties": {
    "warn": {
      "description": "A function that should be called with warnings. The default is to call console.warn.",
      "link": "https://lezer.codemirror.net/docs/ref/#generator.BuildOptions.warn",
      "instanceof": "Function"
    },
    "includeNames": {
      "description": "Whether to include term names in the output file. Defaults to false.",
      "link": "https://lezer.codemirror.net/docs/ref/#generator.BuildOptions.includeNames",
      "type": "boolean"
    },
    "moduleStyle": {
      "description": "Determines the module system used by the output file. Can be either \"cjs\" (CommonJS) or \"es\" (ES2015 module), defaults to \"es\".",
      "link": "https://lezer.codemirror.net/docs/ref/#generator.BuildOptions.moduleStyle",
      "type": "string"
    },
    "typeScript": {
      "description": "Set this to true to output TypeScript code instead of plain JavaScript.",
      "link": "https://lezer.codemirror.net/docs/ref/#generator.BuildOptions.typeScript",
      "type": "boolean"
    },
    "exportName": {
      "description": "The name of the export that holds the parser in the output file. Defaults to \"parser\".",
      "link": "https://lezer.codemirror.net/docs/ref/#generator.BuildOptions.exportName",
      "type": "string"
    },
    "externalTokenizer": {
      "description": "When calling buildParser, this can be used to provide placeholders for external tokenizers.",
      "link": "https://lezer.codemirror.net/docs/ref/#generator.BuildOptions.externalTokenizer",
      "instanceof": "Function"
    },
    "externalPropSource": {
      "description": "Used by buildParser to resolve external prop sources.",
      "link": "https://lezer.codemirror.net/docs/ref/#generator.BuildOptions.externalPropSource",
      "instanceof": "Function"
    },
    "externalSpecializer": {
      "description": "Provide placeholders for external specializers when using buildParser.",
      "link": "https://lezer.codemirror.net/docs/ref/#generator.BuildOptions.externalSpecializer",
      "instanceof": "Function"
    },
    "externalProp": {
      "description": "If given, will be used to initialize external props in the parser returned by buildParser.",
      "link": "https://lezer.codemirror.net/docs/ref/#generator.BuildOptions.externalProp",
      "instanceof": "Function"
    },
    "contextTracker": {
      "description": "If given, will be used as context tracker in a parser built with buildParser.",
      "link": "https://lezer.codemirror.net/docs/ref/#generator.BuildOptions.contextTracker",
      "type": "object",
      "properties": {
        "start": {
          "description": "The initial value of the context at the start of the parse.",
          "link": "https://lezer.codemirror.net/docs/ref/#lr.ContextTracker.constructor^spec.start"
        },
        "shift": {
          "description": "Update the context when the parser executes a shift action.",
          "link": "https://lezer.codemirror.net/docs/ref/#lr.ContextTracker.constructor^spec.shift",
          "instanceof": "Function"
        },
        "reduce": {
          "description": "Update the context when the parser executes a reduce action.",
          "link": "https://lezer.codemirror.net/docs/ref/#lr.ContextTracker.constructor^spec.reduce",
          "instanceof": "Function"
        },
        "reuse": {
          "description": "Update the context when the parser reuses a node from a tree fragment.",
          "link": "https://lezer.codemirror.net/docs/ref/#lr.ContextTracker.constructor^spec.reuse",
          "instanceof": "Function"
        },
        "hash": {
          "description": "Reduce a context value to a number (for cheap storage and comparison). Only needed for strict contexts.",
          "link": "https://lezer.codemirror.net/docs/ref/#lr.ContextTracker.constructor^spec.hash",
          "instanceof": "Function"
        },
        "strict": {
          "description": "By default, nodes can only be reused during incremental parsing if they were created in the same context as the one in which they are reused. Set this to false to disable that check (and the overhead of storing the hashes).",
          "link": "https://lezer.codemirror.net/docs/ref/#lr.ContextTracker.constructor^spec.strict",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    }
  },
  "additionalProperties": false
}
